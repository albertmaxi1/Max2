{"ast":null,"code":"// WARNING: This file contains a hardcoded API key for demonstration as per your request.\n// DO NOT commit real API keys to public repositories in production!\nexport const callGeminiTextAPI = async prompt => {\n  try {\n    let chatHistory = [];\n    chatHistory.push({\n      role: \"user\",\n      parts: [{\n        text: prompt\n      }]\n    });\n    const payload = {\n      contents: chatHistory\n    };\n    const apiKey = \"AIzaSyDr8Zs5bbGFhGHHGq0o4MiUzX2KEnPb89g\";\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const result = await response.json();\n    if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n      return result.candidates[0].content.parts[0].text;\n    } else {\n      return \"Failed to generate text. Please try again.\";\n    }\n  } catch (error) {\n    return \"Error generating text. Please check console.\";\n  }\n};\nexport const callImagenAPI = async prompt => {\n  try {\n    const payload = {\n      instances: {\n        prompt: prompt\n      },\n      parameters: {\n        \"sampleCount\": 1\n      }\n    };\n    const apiKey = \"AIzaSyDr8Zs5bbGFhGHHGq0o4MiUzX2KEnPb89g\";\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const result = await response.json();\n    if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {\n      return `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;\n    } else {\n      return \"https://placehold.co/1200x600/0A1931/FFD700?text=Image+Error\";\n    }\n  } catch (error) {\n    return \"https://placehold.co/1200x600/0A1931/FFD700?text=Image+Error\";\n  }\n};","map":{"version":3,"names":["callGeminiTextAPI","prompt","chatHistory","push","role","parts","text","payload","contents","apiKey","apiUrl","response","fetch","method","headers","body","JSON","stringify","result","json","candidates","length","content","error","callImagenAPI","instances","parameters","predictions","bytesBase64Encoded"],"sources":["/Users/albertmartinez-arizala/Desktop/max2/src/utils/api.js"],"sourcesContent":["// WARNING: This file contains a hardcoded API key for demonstration as per your request.\n// DO NOT commit real API keys to public repositories in production!\nexport const callGeminiTextAPI = async (prompt) => {\n  try {\n    let chatHistory = [];\n    chatHistory.push({ role: \"user\", parts: [{ text: prompt }] });\n    const payload = { contents: chatHistory };\n    const apiKey = \"AIzaSyDr8Zs5bbGFhGHHGq0o4MiUzX2KEnPb89g\";\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    });\n\n    const result = await response.json();\n\n    if (result.candidates && result.candidates.length > 0 &&\n        result.candidates[0].content && result.candidates[0].content.parts &&\n        result.candidates[0].content.parts.length > 0) {\n      return result.candidates[0].content.parts[0].text;\n    } else {\n      return \"Failed to generate text. Please try again.\";\n    }\n  } catch (error) {\n    return \"Error generating text. Please check console.\";\n  }\n};\n\nexport const callImagenAPI = async (prompt) => {\n  try {\n    const payload = { instances: { prompt: prompt }, parameters: { \"sampleCount\": 1 } };\n    const apiKey = \"AIzaSyDr8Zs5bbGFhGHHGq0o4MiUzX2KEnPb89g\";\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;\n\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    });\n\n    const result = await response.json();\n\n    if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {\n      return `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;\n    } else {\n      return \"https://placehold.co/1200x600/0A1931/FFD700?text=Image+Error\";\n    }\n  } catch (error) {\n    return \"https://placehold.co/1200x600/0A1931/FFD700?text=Image+Error\";\n  }\n};"],"mappings":"AAAA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAAG,MAAOC,MAAM,IAAK;EACjD,IAAI;IACF,IAAIC,WAAW,GAAG,EAAE;IACpBA,WAAW,CAACC,IAAI,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE,CAAC;QAAEC,IAAI,EAAEL;MAAO,CAAC;IAAE,CAAC,CAAC;IAC7D,MAAMM,OAAO,GAAG;MAAEC,QAAQ,EAAEN;IAAY,CAAC;IACzC,MAAMO,MAAM,GAAG,yCAAyC;IACxD,MAAMC,MAAM,GAAG,gGAAgGD,MAAM,EAAE;IAEvH,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,EAAE;MACnCG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,OAAO;IAC9B,CAAC,CAAC;IAEF,MAAMW,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAEpC,IAAID,MAAM,CAACE,UAAU,IAAIF,MAAM,CAACE,UAAU,CAACC,MAAM,GAAG,CAAC,IACjDH,MAAM,CAACE,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,IAAIJ,MAAM,CAACE,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,CAACjB,KAAK,IAClEa,MAAM,CAACE,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,CAACjB,KAAK,CAACgB,MAAM,GAAG,CAAC,EAAE;MACjD,OAAOH,MAAM,CAACE,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,CAACjB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;IACnD,CAAC,MAAM;MACL,OAAO,4CAA4C;IACrD;EACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACd,OAAO,8CAA8C;EACvD;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAOvB,MAAM,IAAK;EAC7C,IAAI;IACF,MAAMM,OAAO,GAAG;MAAEkB,SAAS,EAAE;QAAExB,MAAM,EAAEA;MAAO,CAAC;MAAEyB,UAAU,EAAE;QAAE,aAAa,EAAE;MAAE;IAAE,CAAC;IACnF,MAAMjB,MAAM,GAAG,yCAAyC;IACxD,MAAMC,MAAM,GAAG,+FAA+FD,MAAM,EAAE;IAEtH,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,EAAE;MACnCG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,OAAO;IAC9B,CAAC,CAAC;IAEF,MAAMW,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAEpC,IAAID,MAAM,CAACS,WAAW,IAAIT,MAAM,CAACS,WAAW,CAACN,MAAM,GAAG,CAAC,IAAIH,MAAM,CAACS,WAAW,CAAC,CAAC,CAAC,CAACC,kBAAkB,EAAE;MACnG,OAAO,yBAAyBV,MAAM,CAACS,WAAW,CAAC,CAAC,CAAC,CAACC,kBAAkB,EAAE;IAC5E,CAAC,MAAM;MACL,OAAO,8DAA8D;IACvE;EACF,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd,OAAO,8DAA8D;EACvE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}